#pragma once

namespace client_fw
{
	class Mesh;
	class StaticMesh;
	class Skeleton;
	class SkeletalMesh;
	
	class MeshLoader
	{
	public:
		MeshLoader() = default;

		virtual SPtr<Mesh> LoadMesh(const std::string& path, const std::string& extension);
		virtual SPtr<StaticMesh> LoadObj(const std::string& path, const std::string& extension);

	};

	struct MeshData;
	struct BoneData; //데이터를 모두 모은뒤,바깥에서 한번에 Set하기위해 추가

	class RevLoader : public MeshLoader
	{
	public:

		RevLoader() = default;

		virtual SPtr<Mesh> LoadMesh(const std::string& path, const std::string& extension) override;
		virtual SPtr<SkeletalMesh> LoadRev(const std::string& path, const std::string& extension);

		//애니메이션과 계층구조 형태의 파일(rev파일)을 읽음

		//true반환시 메시정보를 전부 읽었고 Animation 정보를 읽을 준비가 됬다는 것을 의미함
		bool LoadFrameHierArchy(FILE* rev_file, SPtr<Skeleton>& skeleton, SPtr<SkeletalMesh>& mesh);

		//void LoadMeshFromFile(FILE* rev_file, SPtr<Mesh>&& mesh);
		void LoadMeshFromRevFile(FILE* rev_file, MeshData& mesh_data);
		void LoadSkinDeformations(FILE* rev_file, SPtr<BoneData>& bone_data);

		int ReadStringFromFile(FILE* file, std::string* word);
	};
	//int ReadFromFile(FILE* file, std::stringstream* word);

}


